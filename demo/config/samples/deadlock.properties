#------------------------------------------------------------------------------#
# Deadlock test                                                                #
#------------------------------------------------------------------------------#

second = 1000
minute = 60000
hour = 3600000
#Long = java.lang.Long
#display = $s{ java.lang.System.out.println("second = ${second}, minute = ${minute}, hour = ${hour}"); }$
#display = $s{ java.lang.System.out.printf("second = %,d, minute = %,d, hour = %,d%n", ${Long}.valueOf(${second}), ${Long}.valueOf(${minute}), ${Long}.valueOf(${hour})); }$

deadlock.concurrencyLimit = 40
deadlock.clientConnections = 5
#deadlock.streamDuration = $s{ 120 * ${minute} }$
deadlock.streamDuration = $s{ 60 * ${second} }$
#deadlock.nbJobs = 1000
deadlock.tasksPerJob = 1000
deadlock.taskDuration = 5
deadlock.useCPU = false
# < 0 means no provisioning
deadlock.slaveNodes = -1
deadlock.waitTime = 15000
deadlock.simulateNodeCrashes = false
# < 0 means null byte[]
deadlock.dataSize = 0
deadlock.maxWaitTime = 15
deadlock.dataProviderSize = -1b
# after how many jobs to submit the one that triggers a deadlock in one of the nodes; < 0 means don't trigger a deadlock
deadlock.triggerNodeDeadlockAfter = -1
# close the client and terminate after the specified number of jobs. Default = -1 (don't terminate) 
#deadlock.closeClientAfter = 200

# javascript script invoked upon creation of each job
#deadlock.script.created = job.getSLA().setAllowMultipleDispatchesToSameChannel(false).setMaxDispatchSize(100);
deadlock.script.created = job.getSLA().setAllowMultipleDispatchesToSameChannel(true);

# javascript script invoked upon completion of each job
#deadlock.script.completed = 
